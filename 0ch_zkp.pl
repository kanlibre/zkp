#============================================================================================================
#	拡張機能 - ゼロ知識証明
#	0ch_zkp.pl
#   based ( https://github.com/codeesura/Zero-Knowledge-Proof-Python-Implementation )
#	--------------------------------------------------------------------------------------------
#	かんりぶれ★ ( https://boumou.li/ )
#
#	Last up date 2024.12.22 ( 新規作成 )
#============================================================================================================
package ZPL_zkp;

use Digest::SHA qw(sha256_hex);
use MIME::Base64 qw(encode_base64);
use Data::UUID;
#------------------------------------------------------------------------------------------------------------
#	拡張機能名称取得
#------------------------------------------------------------------------------------------------------------
sub getName
{
	return 'ゼロ知識証明';
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能説明取得
#------------------------------------------------------------------------------------------------------------
sub getExplanation
{
	return '学習を兼ねゼロ知識証明をテスト実装';
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能タイプ取得
#------------------------------------------------------------------------------------------------------------
sub getType
{
	return 16;
}

#------------------------------------------------------------------------------------------------------------
#	設定リスト取得 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub getConfig
{
	return {};
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能実行インタフェイス
#------------------------------------------------------------------------------------------------------------
sub execute
{
	my $this = shift;
	my ($Sys, $Form, $type) = @_;
	
	# 0ch本家では実行しない
	return 0 if (!$this->{'is0ch+'});
	
	my $zkp = create_zkp();  # インスタンスを作成

	my $secret_card = 'secret';  # 秘密のフレーズ
	my $proof = generate_proof($zkp, $secret_card);

	my $name = $Form->Get('FROM');

	if ($name =~ /!zkp:([a-zA-Z0-9]+)/) {
		my $response = $1;
		my $msg = "Proof: $proof <br>Verified: " . (verify($zkp, $response) ? 'true' : 'false');
		$Form->Set('MESSAGE', $msg);
		$Form->Set('FROM', '');
	}
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#	インスタンスの初期化
#------------------------------------------------------------------------------------------------------------
sub create_zkp {
    my $ug = Data::UUID->new();
    my $salt = encode_base64($ug->create(), '');
    return { salt => $salt };
}

#------------------------------------------------------------------------------------------------------------
#	ハッシュを生成する
#------------------------------------------------------------------------------------------------------------
sub _hash {
    my ($x, $salt) = @_;
    return sha256_hex($x . $salt);
}

#------------------------------------------------------------------------------------------------------------
#	証明を生成する
#------------------------------------------------------------------------------------------------------------
sub generate_proof {
    my ($zkp, $secret) = @_;
    $zkp->{secret} = $secret;
    $zkp->{v} = _hash($secret, $zkp->{salt});
    my $r = int(rand(20) + 1);
    $zkp->{x} = _hash($r, $zkp->{salt});
    return $zkp->{x};
}

#------------------------------------------------------------------------------------------------------------
#	秘密を取得する
#------------------------------------------------------------------------------------------------------------
sub get_secret {
    my $zkp = shift;
    return $zkp->{secret};
}

#------------------------------------------------------------------------------------------------------------
#	検証を行う
#------------------------------------------------------------------------------------------------------------
sub verify {
    my ($zkp, $response) = @_;
    return $zkp->{v} eq _hash($response, $zkp->{salt}); 
}

#------------------------------------------------------------------------------------------------------------
#	コンストラクタ
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $class = shift;
	my ($Config) = @_;
	
	my $this = {};
	bless $this, $class;
	
	if (defined $Config) {
		$this->{'PLUGINCONF'} = $Config;
		$this->{'is0ch+'} = 1;
	}
	else {
		$this->{'CONFIG'} = $class->getConfig();
		$this->{'is0ch+'} = 0;
	}
	
	return $this;
}

#------------------------------------------------------------------------------------------------------------
#	設定値取得 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub GetConf
{
	my $this = shift;
	my ($key) = @_;
	if ($this->{'is0ch+'}) {
		return $this->{'PLUGINCONF'}->GetConfig($key);
	}
	elsif (defined $this->{'CONFIG'}->{$key}) {
		return $this->{'CONFIG'}->{$key}->{'default'};
	}
}

#------------------------------------------------------------------------------------------------------------
#	設定値設定 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub SetConf
{
	my $this = shift;
	my ($key, $val) = @_;
	if ($this->{'is0ch+'}) {
		$this->{'PLUGINCONF'}->SetConfig($key, $val);
	}
	elsif (defined $this->{'CONFIG'}->{$key}) {
		$this->{'CONFIG'}->{$key}->{'default'} = $val;
	}
	else {
		$this->{'CONFIG'}->{$key} = { 'default' => $val };
	}
}

#============================================================================================================
#	Module END
#============================================================================================================
1;